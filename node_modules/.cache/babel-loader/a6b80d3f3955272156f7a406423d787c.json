{"ast":null,"code":"import _classCallCheck from \"/home/edwin/programy/CalculatorComplex/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/edwin/programy/CalculatorComplex/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/edwin/programy/CalculatorComplex/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/edwin/programy/CalculatorComplex/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/home/edwin/programy/CalculatorComplex/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/edwin/programy/CalculatorComplex/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/edwin/programy/CalculatorComplex/src/Complex/App.js\";\n// 13.12.2019\n// Hello, I'm Edwin and this is my first so advanced app in react written from scratch.\n// I didn't write the shortest possible code because it is app for developers and (I hope) my future employer\n// In this code I bet on Developer Experience and I use switch construction everywhere where it was possible\n// It makes my code easy to read and let me for catching errors in easy way\n// I hope you I'll like it :)\n// Application to making simplest counting at positive complex numbers\n// It can handle adding, substracting, multiplying, dividing and counting module (%)\n// Logical map of application:\n// - Input data is possible only through clicking on the keyboard displayin on the user screen\n// - During input method changeValue adding another values as a string to previous state of current input\n// - changeValue call method trimZero, which check if at the first position of inputted string is 0\n// - if positive it cut it off\n// - Then when user click button \"next input\" or \"previous input\" currentInput (state of application) change\n// - If user click special signs then method saveSign chceck if it is \"=\", then it try to count operation\n//   connected to sign saved in application state. If there isn't any it log in console an error number.\n// - If sign is \"%\" application try to count module of current number thanks to method module()\n// - If sign is operator any aviable operations then method count is calling and trying to count ther result\n// - If it works well then result is given through the props into the result component and display for user\n//   It also restart all values of application state and change current input into first so thah user can keep counting\n// - If it gone badly then log error number in the console\n// - Error numbers with short describe are at the end of this code\nimport React, { Component } from \"react\";\nimport Keyboard from \"./Keyboard\";\nimport Signs from \"./SignsArray\";\nimport Result from \"./Result\";\nimport Screen from \"./Screen\";\nimport Button from \"./Button\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this));\n    _this.state = {\n      number_1: {\n        real: \"0\",\n        imaginary: \"0\"\n      },\n      number_2: {\n        real: \"0\",\n        imaginary: \"0\"\n      },\n      currentInput: 1,\n      sign: \"\",\n      resultReal: \"0\",\n      resultImaginary: \"0\",\n      errorNumber: null\n    };\n    _this.changeValue = _this.changeValue.bind(_assertThisInitialized(_this));\n    _this.trimZero = _this.trimZero.bind(_assertThisInitialized(_this));\n    _this.saveSign = _this.saveSign.bind(_assertThisInitialized(_this));\n    _this.count = _this.count.bind(_assertThisInitialized(_this));\n    _this.module = _this.module.bind(_assertThisInitialized(_this));\n    _this.errorLog = _this.errorLog.bind(_assertThisInitialized(_this));\n    _this.prevInput = _this.prevInput.bind(_assertThisInitialized(_this));\n    _this.nextInput = _this.nextInput.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"prevInput\",\n    value: function prevInput() {\n      // Changing currentInput value into lower, log error if user try to choose value lower than 1\n      if (this.state.currentInput !== 1) {\n        this.setState(function (prevState) {\n          var newCurrentInput = prevState.currentInput - 1;\n          return {\n            currentInput: newCurrentInput\n          };\n        });\n      } else {\n        this.setState({\n          errorNumber: 6\n        });\n      }\n    }\n  }, {\n    key: \"nextInput\",\n    value: function nextInput() {\n      // Changing currentInput value into higher, log error if user try to choose value higher than 4\n      if (this.state.currentInput !== 4) {\n        this.setState(function (prevState) {\n          var newCurrentInput = prevState.currentInput + 1;\n          return {\n            currentInput: newCurrentInput\n          };\n        });\n      } else {\n        this.setState({\n          errorNumber: 7\n        });\n      }\n    }\n  }, {\n    key: \"module\",\n    value: function module() {\n      // Counting module of current number\n      switch (this.state.currentInput) {\n        case 1 || 2:\n          this.setState(function (prevState) {\n            var realPow = prevState.number_1.real !== \"0\" ? Math.pow(prevState.number_1.real, 2) : 0;\n            var imaginaryPow = prevState.number_1.imaginary !== \"0\" ? Math.pow(prevState.number_1.imaginary, 2) : 0;\n            var newVal = Math.sqrt(realPow + imaginaryPow);\n            return {\n              resultReal: newVal\n            };\n          });\n          break;\n\n        case 3 || 4:\n          this.setState(function (prevState) {\n            var realPow = prevState.number_2.real !== \"0\" ? Math.pow(prevState.number_2.real, 2) : 0;\n            var imaginaryPow = prevState.number_2.imaginary !== \"0\" ? Math.pow(prevState.number_2.imaginary, 2) : 0;\n            var newVal = Math.sqrt(realPow + imaginaryPow);\n            return {\n              resultReal: newVal\n            };\n          });\n          break;\n\n        default:\n          this.setState({\n            errorNumber: 5\n          });\n          break;\n      }\n    }\n  }, {\n    key: \"count\",\n    value: function count(sign) {\n      if (sign === \"\") {\n        this.setState({\n          errorNumber: 3\n        });\n      } else {\n        // Chcecking type of sign and tryning count\n        switch (sign) {\n          case \"+\":\n            this.setState(function (prevState) {\n              var nevReal = prevState.number_1.real + prevState.number_2.real;\n              var nevImaginary = prevState.number_1.imaginary + prevState.number_2.imaginary;\n              return {\n                sign: \"\",\n                resultReal: nevReal,\n                resultImaginary: nevImaginary,\n                currentInput: 1,\n                errorNumber: null,\n                number_1: {\n                  real: \"0\",\n                  imaginary: \"0\"\n                },\n                number_2: {\n                  real: \"0\",\n                  imaginary: \"0\"\n                }\n              };\n            });\n            break;\n\n          case \"-\":\n            this.setState(function (prevState) {\n              var nevReal = prevState.number_1.real - prevState.number_2.real;\n              var nevImaginary = prevState.number_1.imaginary - prevState.number_2.imaginary;\n              return {\n                sign: \"\",\n                resultReal: nevReal,\n                resultImaginary: nevImaginary,\n                currentInput: 1,\n                errorNumber: null,\n                number_1: {\n                  real: \"0\",\n                  imaginary: \"0\"\n                },\n                number_2: {\n                  real: \"0\",\n                  imaginary: \"0\"\n                }\n              };\n            });\n            break;\n\n          case \"*\":\n            this.setState(function (prevState) {\n              var nevReal = prevState.number_1.real * prevState.number_2.real - prevState.number_1.imaginary * prevState.number_2.imaginary;\n              var nevImaginary = prevState.number_1.real * prevState.number_2.imaginary + prevState.number_1.imaginary * prevState.number_2.real;\n              return {\n                sign: \"\",\n                resultReal: nevReal,\n                resultImaginary: nevImaginary,\n                currentInput: 1,\n                errorNumber: null,\n                number_1: {\n                  real: \"0\",\n                  imaginary: \"0\"\n                },\n                number_2: {\n                  real: \"0\",\n                  imaginary: \"0\"\n                }\n              };\n            });\n            break;\n\n          case \"/\":\n            this.setState(function (prevState) {\n              var nevReal = prevState.number_1.real * prevState.number_2.real + prevState.number_1.imaginary * prevState.number_2.imaginary;\n              var denominator = prevState.number_2.real * prevState.number_2.real + prevState.number_2.imaginary * prevState.number_2.imaginary;\n              nevReal = nevReal / denominator;\n              var nevImaginary = prevState.number_1.imaginary * prevState.number_2.real - prevState.number_1.real * prevState.number_2.imaginary;\n              nevImaginary = nevImaginary / denominator;\n              return {\n                sign: \"\",\n                resultReal: nevReal,\n                resultImaginary: nevImaginary,\n                currentInput: 1,\n                errorNumber: null,\n                number_1: {\n                  real: \"0\",\n                  imaginary: \"0\"\n                },\n                number_2: {\n                  real: \"0\",\n                  imaginary: \"0\"\n                }\n              };\n            });\n            break;\n\n          default:\n            this.setState({\n              errorNumber: 4\n            });\n            break;\n        }\n      }\n    }\n  }, {\n    key: \"saveSign\",\n    value: function saveSign(val) {\n      // If user click \"=\" application try to count inputted value using sing saved in state of appliaction\n      if (val === \"=\") {\n        this.count(this.state.sign);\n      } else {\n        switch (val) {\n          // If user click this back arrow, application try to work like a backspace\n          case \"←\":\n            switch (this.state.currentInput) {\n              case 1:\n                this.setState(function (prevState) {\n                  var prevVal = String(prevState.number_1.real);\n                  var nevVal = prevVal.length < 2 ? \"0\" : prevState.number_1.real.slice(0, -1);\n                  console.log(\"Długośc stringa: \" + prevVal.length);\n                  console.log(\"wartość do wpisania: \" + nevVal);\n                  return {\n                    number_1: {\n                      real: nevVal,\n                      imaginary: prevState.number_1.imaginary\n                    }\n                  };\n                });\n                break;\n\n              case 2:\n                this.setState(function (prevState) {\n                  var prevVal = String(prevState.number_1.imaginary);\n                  var nevVal = prevVal.length < 2 ? \"0\" : prevState.number_1.imaginary.slice(0, -1);\n                  console.log(\"Długośc stringa: \" + prevVal.length);\n                  console.log(\"wartość do wpisania: \" + nevVal);\n                  return {\n                    number_1: {\n                      imaginary: nevVal,\n                      real: prevState.number_1.real\n                    }\n                  };\n                });\n                break;\n\n              case 3:\n                this.setState(function (prevState) {\n                  var prevVal = String(prevState.number_2.real);\n                  var nevVal = prevVal.length < 2 ? \"0\" : prevState.number_2.real.slice(0, -1);\n                  console.log(\"Długośc stringa: \" + prevVal.length);\n                  console.log(\"wartość do wpisania: \" + nevVal);\n                  return {\n                    number_2: {\n                      real: nevVal,\n                      imaginary: prevState.number_2.imaginary\n                    }\n                  };\n                });\n                break;\n\n              case 4:\n                this.setState(function (prevState) {\n                  var prevVal = String(prevState.number_2.imaginary);\n                  var nevVal = prevVal.length < 2 ? \"0\" : prevState.number_2.imaginary.slice(0, -1);\n                  console.log(\"Długośc stringa: \" + prevVal.length);\n                  console.log(\"wartość do wpisania: \" + nevVal);\n                  return {\n                    number_2: {\n                      imaginary: nevVal,\n                      real: prevState.number_2.real\n                    }\n                  };\n                });\n                break;\n\n              default:\n                this.setState({\n                  errorNumber: 2\n                });\n                break;\n            }\n\n            break;\n\n          case \"%\":\n            this.module();\n            break;\n\n          default:\n            this.setState({\n              sign: val\n            });\n        }\n      }\n    }\n  }, {\n    key: \"trimZero\",\n    value: function trimZero() {\n      // this method try to remove zero from first position in the current input\n      switch (this.state.currentInput) {\n        case 1:\n          if (this.state.number_1.real.charAt(0) === 0 || this.state.number_1.real.charAt(0) === \"0\") {\n            this.setState(function (prevState) {\n              var nevVal = prevState.number_1.real.substr(1);\n\n              if (nevVal !== undefined) {\n                return {\n                  number_1: {\n                    real: nevVal,\n                    imaginary: prevState.number_1.imaginary\n                  }\n                };\n              }\n            });\n          }\n\n          break;\n\n        case 2:\n          if (this.state.number_1.imaginary.charAt(0) === 0 || this.state.number_1.imaginary.charAt(0) === \"0\") {\n            this.setState(function (prevState) {\n              var nevVal = prevState.number_1.imaginary.substr(1);\n\n              if (nevVal !== undefined) {\n                return {\n                  number_1: {\n                    imaginary: nevVal,\n                    real: prevState.number_1.real\n                  }\n                };\n              }\n            });\n          }\n\n          break;\n\n        case 3:\n          if (this.state.number_2.real.charAt(0) === 0 || this.state.number_2.real.charAt(0) === \"0\") {\n            this.setState(function (prevState) {\n              var nevVal = prevState.number_2.real.substr(1);\n\n              if (nevVal !== undefined) {\n                return {\n                  number_2: {\n                    real: nevVal,\n                    imaginary: prevState.number_2.imaginary\n                  }\n                };\n              }\n            });\n          }\n\n          break;\n\n        case 4:\n          if (this.state.number_2.imaginary.charAt(0) === 0 || this.state.number_2.imaginary.charAt(0) === \"0\") {\n            this.setState(function (prevState) {\n              var nevVal = prevState.number_2.imaginary.substr(1);\n\n              if (nevVal !== undefined) {\n                return {\n                  number_2: {\n                    imaginary: nevVal,\n                    real: prevState.number_2.real\n                  }\n                };\n              }\n            });\n          }\n\n          break;\n\n        default:\n          this.setState({\n            errorNumber: 0\n          });\n          console.log(\"Error numer: 0\");\n          break;\n      }\n    }\n  }, {\n    key: \"changeValue\",\n    value: function changeValue(e) {\n      this.trimZero(); // Application get value of button clicked by user thanks to it's \"innerHTML\"\n      // Then check if it is special sign, if true then it call method saveSign otherwise it add value into input as a string\n\n      var val = e.target.innerHTML;\n      var specialSign;\n\n      function test(a) {\n        if (a === val) {\n          specialSign = \"yes\";\n          return specialSign;\n        }\n      }\n\n      for (var i = 0; i < Signs.length; i++) {\n        test(Signs[i]);\n      }\n\n      if (specialSign === \"yes\") {\n        this.saveSign(val);\n      } else {\n        switch (this.state.currentInput) {\n          case 1:\n            this.setState(function (prevState) {\n              var nevVal = prevState.number_1.real + \"\" + val;\n              return {\n                number_1: {\n                  real: nevVal,\n                  imaginary: prevState.number_1.imaginary\n                }\n              };\n            });\n            break;\n\n          case 2:\n            this.setState(function (prevState) {\n              var nevVal = prevState.number_1.imaginary + \"\" + val;\n              return {\n                number_1: {\n                  imaginary: nevVal,\n                  real: prevState.number_1.real\n                }\n              };\n            });\n            break;\n\n          case 3:\n            this.setState(function (prevState) {\n              var nevVal = prevState.number_2.real + \"\" + val;\n              return {\n                number_2: {\n                  real: nevVal,\n                  imaginary: prevState.number_2.imaginary\n                }\n              };\n            });\n            break;\n\n          case 4:\n            this.setState(function (prevState) {\n              var nevVal = prevState.number_2.imaginary + \"\" + val;\n              return {\n                number_2: {\n                  imaginary: nevVal,\n                  real: prevState.number_2.real\n                }\n              };\n            });\n            break;\n\n          default:\n            this.setState({\n              errorNumber: 0\n            });\n            console.log(\"Error numer: 1\");\n            break;\n        }\n      }\n    }\n  }, {\n    key: \"errorLog\",\n    value: function errorLog() {\n      if (this.state.errorNumber !== null) {\n        console.log(\"Appeared error number: \" + this.state.errorNumber);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      this.errorLog();\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 460\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 461\n        },\n        __self: this\n      }, \"Pierwszy reactowy kalkulator liczb zespolonych\"), React.createElement(Screen, {\n        n1r: this.state.number_1.real,\n        n1i: this.state.number_1.imaginary,\n        n2r: this.state.number_2.real,\n        n2i: this.state.number_2.imaginary,\n        currentInput: this.state.currentInput,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 462\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"control__buttons\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 464\n        },\n        __self: this\n      }, React.createElement(Button, {\n        function: this.prevInput,\n        value: \"Previous\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 465\n        },\n        __self: this\n      }), React.createElement(Button, {\n        function: this.nextInput,\n        value: \"Next\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 466\n        },\n        __self: this\n      })), React.createElement(Keyboard, {\n        function: this.changeValue,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 468\n        },\n        __self: this\n      }), React.createElement(Result, {\n        resultReal: this.state.resultReal,\n        resultImaginary: this.state.resultImaginary,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 469\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;\n/* Error numbers:\r\n\r\n0 - Trimming problem function trimZero\r\n1 - Changing value problem function changeValue\r\n2 - Problem with saving sign because of currentInput value in function saveSign \r\n3 - Counting problem because of empty sign\r\n4 - Counting problem because of wrong value in sign\r\n5 - Module problem because of currentInput value out of range\r\n6 - Problem with trying to change input into lower position than 1\r\n7 - Problem with trying to change input into higher position than 4\r\n\r\n*/","map":{"version":3,"sources":["/home/edwin/programy/CalculatorComplex/src/Complex/App.js"],"names":["React","Component","Keyboard","Signs","Result","Screen","Button","App","state","number_1","real","imaginary","number_2","currentInput","sign","resultReal","resultImaginary","errorNumber","changeValue","bind","trimZero","saveSign","count","module","errorLog","prevInput","nextInput","setState","prevState","newCurrentInput","realPow","Math","pow","imaginaryPow","newVal","sqrt","nevReal","nevImaginary","denominator","val","prevVal","String","nevVal","length","slice","console","log","charAt","substr","undefined","e","target","innerHTML","specialSign","test","a","i"],"mappings":"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","sourcesContent":["// 13.12.2019\r\n// Hello, I'm Edwin and this is my first so advanced app in react written from scratch.\r\n// I didn't write the shortest possible code because it is app for developers and (I hope) my future employer\r\n// In this code I bet on Developer Experience and I use switch construction everywhere where it was possible\r\n// It makes my code easy to read and let me for catching errors in easy way\r\n// I hope you I'll like it :)\r\n\r\n\r\n// Application to making simplest counting at positive complex numbers\r\n// It can handle adding, substracting, multiplying, dividing and counting module (%)\r\n// Logical map of application:\r\n// - Input data is possible only through clicking on the keyboard displayin on the user screen\r\n// - During input method changeValue adding another values as a string to previous state of current input\r\n// - changeValue call method trimZero, which check if at the first position of inputted string is 0\r\n// - if positive it cut it off\r\n// - Then when user click button \"next input\" or \"previous input\" currentInput (state of application) change\r\n// - If user click special signs then method saveSign chceck if it is \"=\", then it try to count operation\r\n//   connected to sign saved in application state. If there isn't any it log in console an error number.\r\n// - If sign is \"%\" application try to count module of current number thanks to method module()\r\n// - If sign is operator any aviable operations then method count is calling and trying to count ther result\r\n// - If it works well then result is given through the props into the result component and display for user\r\n//   It also restart all values of application state and change current input into first so thah user can keep counting\r\n// - If it gone badly then log error number in the console\r\n// - Error numbers with short describe are at the end of this code\r\n\r\n\r\n\r\nimport React, { Component } from \"react\";\r\nimport Keyboard from \"./Keyboard\";\r\nimport Signs from \"./SignsArray\";\r\nimport Result from \"./Result\";\r\nimport Screen from \"./Screen\";\r\nimport Button from \"./Button\";\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      number_1: {\r\n        real: \"0\",\r\n        imaginary: \"0\"\r\n      },\r\n      number_2: {\r\n        real: \"0\",\r\n        imaginary: \"0\"\r\n      },\r\n      currentInput: 1,\r\n      sign: \"\",\r\n      resultReal: \"0\",\r\n      resultImaginary: \"0\",\r\n      errorNumber: null\r\n    };\r\n    this.changeValue = this.changeValue.bind(this);\r\n    this.trimZero = this.trimZero.bind(this);\r\n    this.saveSign = this.saveSign.bind(this);\r\n    this.count = this.count.bind(this);\r\n    this.module = this.module.bind(this);\r\n    this.errorLog = this.errorLog.bind(this);\r\n    this.prevInput = this.prevInput.bind(this);\r\n    this.nextInput = this.nextInput.bind(this);\r\n  }\r\n  prevInput(){\r\n    // Changing currentInput value into lower, log error if user try to choose value lower than 1\r\n    if (this.state.currentInput !== 1){\r\n      this.setState(prevState=>{\r\n        let newCurrentInput = prevState.currentInput - 1;\r\n        return{\r\n          currentInput: newCurrentInput\r\n        }\r\n      })\r\n    } else {\r\n      this.setState({\r\n        errorNumber: 6\r\n      })\r\n    }\r\n  }\r\n  nextInput(){\r\n        // Changing currentInput value into higher, log error if user try to choose value higher than 4\r\n    if (this.state.currentInput !== 4){\r\n      this.setState(prevState=>{\r\n        let newCurrentInput = prevState.currentInput + 1;\r\n        return{\r\n          currentInput: newCurrentInput\r\n        }\r\n      })\r\n    } else {\r\n      this.setState({\r\n        errorNumber: 7\r\n      })\r\n    }\r\n  } \r\n  module(){\r\n    // Counting module of current number\r\n    switch(this.state.currentInput){\r\n      case 1 || 2:\r\n        this.setState(prevState=>{\r\n          let realPow = (prevState.number_1.real !== \"0\")? Math.pow(prevState.number_1.real, 2): 0;\r\n          let imaginaryPow = (prevState.number_1.imaginary !== \"0\")? Math.pow(prevState.number_1.imaginary, 2): 0;\r\n          let newVal = Math.sqrt((realPow + imaginaryPow)); \r\n          return {\r\n            resultReal: newVal\r\n          }\r\n        })\r\n      break;\r\n      case 3 || 4:\r\n        this.setState(prevState=>{\r\n          let realPow = (prevState.number_2.real !== \"0\")? Math.pow(prevState.number_2.real, 2): 0;\r\n          let imaginaryPow = (prevState.number_2.imaginary !== \"0\")? Math.pow(prevState.number_2.imaginary, 2): 0;\r\n          let newVal = Math.sqrt((realPow + imaginaryPow)); \r\n          return {\r\n            resultReal: newVal\r\n          }\r\n        })\r\n      break;\r\n      default:\r\n        this.setState({\r\n          errorNumber: 5\r\n        })\r\n      break;\r\n    }\r\n  }\r\n\r\n  count(sign){\r\n    if (sign === \"\"){\r\n      this.setState({\r\n        errorNumber: 3\r\n      });\r\n    } else {\r\n      // Chcecking type of sign and tryning count\r\n    switch(sign){\r\n      case \"+\":\r\n        this.setState(prevState => {\r\n          let nevReal = prevState.number_1.real + prevState.number_2.real;\r\n          let nevImaginary = prevState.number_1.imaginary + prevState.number_2.imaginary;\r\n          return {\r\n            sign: \"\",\r\n            resultReal: nevReal,\r\n            resultImaginary: nevImaginary,\r\n            currentInput: 1,\r\n            errorNumber: null,\r\n            number_1: {\r\n              real: \"0\",\r\n              imaginary: \"0\"\r\n            },\r\n            number_2: {\r\n              real: \"0\",\r\n              imaginary: \"0\"\r\n            }\r\n          }\r\n        })\r\n      break;\r\n      case \"-\":\r\n        this.setState(prevState => {\r\n          let nevReal = prevState.number_1.real - prevState.number_2.real;\r\n          let nevImaginary = prevState.number_1.imaginary - prevState.number_2.imaginary;\r\n          return {\r\n            sign: \"\",\r\n            resultReal: nevReal,\r\n            resultImaginary: nevImaginary,\r\n            currentInput: 1,\r\n            errorNumber: null,\r\n            number_1: {\r\n              real: \"0\",\r\n              imaginary: \"0\"\r\n            },\r\n            number_2: {\r\n              real: \"0\",\r\n              imaginary: \"0\"\r\n            }\r\n          }\r\n        })\r\n      break;\r\n      case \"*\":\r\n        this.setState(prevState => {\r\n          let nevReal = (prevState.number_1.real * prevState.number_2.real) - (prevState.number_1.imaginary * prevState.number_2.imaginary);\r\n          let nevImaginary = (prevState.number_1.real * prevState.number_2.imaginary) + (prevState.number_1.imaginary * prevState.number_2.real);\r\n          return {\r\n            sign: \"\",\r\n            resultReal: nevReal,\r\n            resultImaginary: nevImaginary,\r\n            currentInput: 1,\r\n            errorNumber: null,\r\n            number_1: {\r\n              real: \"0\",\r\n              imaginary: \"0\"\r\n            },\r\n            number_2: {\r\n              real: \"0\",\r\n              imaginary: \"0\"\r\n            }\r\n          }\r\n        })\r\n      break;\r\n      case \"/\":\r\n        this.setState(prevState => {\r\n          let nevReal = (prevState.number_1.real * prevState.number_2.real) + (prevState.number_1.imaginary * prevState.number_2.imaginary);\r\n          let denominator =  (prevState.number_2.real * prevState.number_2.real) + (prevState.number_2.imaginary * prevState.number_2.imaginary);\r\n          nevReal = nevReal/denominator;\r\n          let nevImaginary = (prevState.number_1.imaginary * prevState.number_2.real) - (prevState.number_1.real * prevState.number_2.imaginary);\r\n          nevImaginary = nevImaginary/denominator;\r\n          return {\r\n            sign: \"\",\r\n            resultReal: nevReal,\r\n            resultImaginary: nevImaginary,\r\n            currentInput: 1,\r\n            errorNumber: null,\r\n            number_1: {\r\n              real: \"0\",\r\n              imaginary: \"0\"\r\n            },\r\n            number_2: {\r\n              real: \"0\",\r\n              imaginary: \"0\"\r\n            }\r\n          }\r\n        })\r\n      break;\r\n      default:\r\n        this.setState({\r\n          errorNumber: 4\r\n        });\r\n      break;\r\n    }\r\n    }\r\n  }\r\n  saveSign(val){\r\n    // If user click \"=\" application try to count inputted value using sing saved in state of appliaction\r\n    if (val === \"=\"){\r\n      this.count(this.state.sign);\r\n      } else {\r\n        switch(val){\r\n          // If user click this back arrow, application try to work like a backspace\r\n          case \"←\":\r\n            switch(this.state.currentInput){\r\n              case 1:\r\n                this.setState(prevState => {\r\n                  let prevVal = String(prevState.number_1.real);\r\n                  let nevVal = (prevVal.length < 2) ? \"0\" : prevState.number_1.real.slice(0,-1);\r\n                  console.log(\"Długośc stringa: \" + prevVal.length);\r\n                  console.log(\"wartość do wpisania: \" + nevVal);\r\n                  return {\r\n                    number_1: {\r\n                      real: nevVal,\r\n                      imaginary: prevState.number_1.imaginary\r\n                    }\r\n                  }\r\n                })\r\n              break;\r\n              case 2:\r\n                this.setState(prevState => {\r\n                  let prevVal = String(prevState.number_1.imaginary);\r\n                  let nevVal = (prevVal.length < 2) ? \"0\" : prevState.number_1.imaginary.slice(0,-1);\r\n                  console.log(\"Długośc stringa: \" + prevVal.length);\r\n                  console.log(\"wartość do wpisania: \" + nevVal);\r\n                  return {\r\n                    number_1: {\r\n                      imaginary: nevVal,\r\n                      real: prevState.number_1.real\r\n                    }\r\n                  }\r\n                })\r\n              break;\r\n              case 3:\r\n                this.setState(prevState => {\r\n                  let prevVal = String(prevState.number_2.real);\r\n                  let nevVal = (prevVal.length < 2) ? \"0\" : prevState.number_2.real.slice(0,-1);\r\n                  console.log(\"Długośc stringa: \" + prevVal.length);\r\n                  console.log(\"wartość do wpisania: \" + nevVal);\r\n                  return {\r\n                    number_2: {\r\n                      real: nevVal,\r\n                      imaginary: prevState.number_2.imaginary\r\n                    }\r\n                  }\r\n                })\r\n              break;\r\n              case 4:\r\n                this.setState(prevState => {\r\n                  let prevVal = String(prevState.number_2.imaginary);\r\n                  let nevVal = (prevVal.length < 2) ? \"0\" : prevState.number_2.imaginary.slice(0,-1);\r\n                  console.log(\"Długośc stringa: \" + prevVal.length);\r\n                  console.log(\"wartość do wpisania: \" + nevVal);\r\n                  return {\r\n                    number_2: {\r\n                      imaginary: nevVal,\r\n                      real: prevState.number_2.real\r\n                    }\r\n                  }\r\n                })\r\n              break;\r\n              default:\r\n                this.setState({\r\n                  errorNumber: 2\r\n                });\r\n              break;\r\n            }\r\n          break;\r\n          case \"%\":\r\n          this.module();\r\n          break;\r\n          default:\r\n            this.setState({\r\n              sign: val\r\n            });\r\n        }\r\n      }\r\n  }\r\n  trimZero(){\r\n    // this method try to remove zero from first position in the current input\r\n    switch(this.state.currentInput){\r\n      case 1:\r\n        if((this.state.number_1.real.charAt(0) === 0) || (this.state.number_1.real.charAt(0) === \"0\")){\r\n          this.setState(prevState => {\r\n            let nevVal = prevState.number_1.real.substr(1);\r\n            if (nevVal !== undefined){\r\n            return {\r\n              number_1: {\r\n                real: nevVal,\r\n                imaginary: prevState.number_1.imaginary\r\n              }\r\n            }\r\n          }\r\n          })\r\n        }\r\n        break;\r\n        case 2:\r\n        if((this.state.number_1.imaginary.charAt(0) === 0) || (this.state.number_1.imaginary.charAt(0) === \"0\")){\r\n          this.setState(prevState => {\r\n            let nevVal = prevState.number_1.imaginary.substr(1);\r\n            if (nevVal !== undefined){\r\n            return {\r\n              number_1: {\r\n                imaginary: nevVal,\r\n                real: prevState.number_1.real\r\n              }\r\n            }\r\n          }\r\n          })\r\n        }\r\n        break;\r\n        case 3:\r\n        if((this.state.number_2.real.charAt(0) === 0) || (this.state.number_2.real.charAt(0) === \"0\")){\r\n          this.setState(prevState => {\r\n            let nevVal = prevState.number_2.real.substr(1);\r\n            if (nevVal !== undefined){\r\n            return {\r\n              number_2: {\r\n                real: nevVal,\r\n                imaginary: prevState.number_2.imaginary\r\n              }\r\n            }\r\n          }\r\n          });\r\n        }\r\n        break;\r\n        case 4:\r\n        if((this.state.number_2.imaginary.charAt(0) === 0) || (this.state.number_2.imaginary.charAt(0) === \"0\")){\r\n          this.setState(prevState => {\r\n            let nevVal = prevState.number_2.imaginary.substr(1);\r\n            if (nevVal !== undefined){\r\n            return {\r\n              number_2: {\r\n                imaginary: nevVal,\r\n                real: prevState.number_2.real\r\n              }\r\n            }\r\n          }\r\n          })\r\n        }\r\n        break;\r\n        default:\r\n          this.setState({\r\n            errorNumber: 0\r\n          });\r\n          console.log(\"Error numer: 0\");\r\n        break;\r\n    }\r\n  }\r\n  changeValue(e){\r\n    this.trimZero();\r\n    // Application get value of button clicked by user thanks to it's \"innerHTML\"\r\n    // Then check if it is special sign, if true then it call method saveSign otherwise it add value into input as a string\r\n    let val = e.target.innerHTML;\r\n    let specialSign;\r\n    function test(a){\r\n      if (a === val){\r\n        specialSign = \"yes\";\r\n        return specialSign;\r\n      } \r\n    }\r\n    for (let i=0; i < Signs.length; i++){\r\n      test(Signs[i]);\r\n    }\r\n    if (specialSign === \"yes\" ){\r\n      this.saveSign(val);\r\n    } else {\r\n    switch(this.state.currentInput){\r\n      case 1:\r\n        this.setState(prevState => {\r\n          let nevVal = prevState.number_1.real + \"\" + val;\r\n          return {\r\n            number_1: {\r\n              real: nevVal,\r\n              imaginary: prevState.number_1.imaginary\r\n\r\n          }\r\n        }\r\n      });\r\n      break;\r\n      case 2:\r\n        this.setState(prevState => {\r\n          let nevVal = prevState.number_1.imaginary + \"\" + val;\r\n          return {\r\n            number_1: {\r\n              imaginary: nevVal,\r\n              real: prevState.number_1.real\r\n          }\r\n        }\r\n      });\r\n      break;\r\n      case 3:\r\n        this.setState(prevState => {\r\n          let nevVal = prevState.number_2.real + \"\" + val;\r\n          return {\r\n            number_2: {\r\n              real: nevVal,\r\n              imaginary: prevState.number_2.imaginary\r\n          }\r\n        }\r\n      });\r\n      break;\r\n      case 4:\r\n        this.setState(prevState => {\r\n          let nevVal = prevState.number_2.imaginary + \"\" + val;\r\n          return {\r\n            number_2: {\r\n              imaginary: nevVal,\r\n              real: prevState.number_2.real\r\n          }\r\n        }\r\n      });\r\n      break;\r\n      default:\r\n          this.setState({\r\n            errorNumber: 0\r\n          });\r\n          console.log(\"Error numer: 1\");\r\n        break;\r\n    }\r\n  }\r\n}\r\nerrorLog(){\r\n  if(this.state.errorNumber !== null){\r\n    console.log(\"Appeared error number: \" + this.state.errorNumber);\r\n  }\r\n}\r\n  render() {\r\n    this.errorLog();\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>Pierwszy reactowy kalkulator liczb zespolonych</h1>\r\n        <Screen n1r={this.state.number_1.real} n1i={this.state.number_1.imaginary} n2r={this.state.number_2.real} n2i={this.state.number_2.imaginary} currentInput={this.state.currentInput}>\r\n        </Screen>\r\n        <div className=\"control__buttons\">\r\n          <Button function={this.prevInput} value=\"Previous\" />\r\n          <Button function={this.nextInput} value=\"Next\" />\r\n        </div>\r\n        <Keyboard function={this.changeValue} />\r\n        <Result resultReal={this.state.resultReal} resultImaginary={this.state.resultImaginary} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n/* Error numbers:\r\n\r\n0 - Trimming problem function trimZero\r\n1 - Changing value problem function changeValue\r\n2 - Problem with saving sign because of currentInput value in function saveSign \r\n3 - Counting problem because of empty sign\r\n4 - Counting problem because of wrong value in sign\r\n5 - Module problem because of currentInput value out of range\r\n6 - Problem with trying to change input into lower position than 1\r\n7 - Problem with trying to change input into higher position than 4\r\n\r\n*/"]},"metadata":{},"sourceType":"module"}